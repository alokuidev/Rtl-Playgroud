[{"content":"# Query  Functions\n\nAll query functions are accessed through the `screen` object in a test.  These query functions *always* begin with one of the following names: `getBy`, `getAllBy`, `queryBy`, `queryAllBy`, `findBy`, `findAllBy`. \n\n| Start of Function Name | Examples                             |\n|------------------------|--------------------------------------|\n| getBy                  | getByRole, getByText                 |\n| getAllBy               | getAllByText, getByDisplayValue      |\n| queryBy                | queryByDisplayValue, queryByTitle    |\n| queryAllBy             | queryAllByTitle, queryAllByText      |\n| findBy                 | findByRole, findBytext               |\n| findAllBy              | findAllByText, findAllByDisplayValue |\n\nThese names indicate the following:\n\n1. Whether the function will return an element or an array of elements\n2. What happens if the function finds 0, 1, or > 1 of the targeted element\n3. Whether the function runs instantly (synchronously) or looks for an element over a span of time (asynchronously)\n\n\n### Looking for a Single Element?\n\n| Name    | 0 matches | 1 match | > 1 match | Notes                                          |\n|---------|-----------|---------|-----------|------------------------------------------------|\n| getBy   | Throw     | Element | Throw     |                                                |\n| queryBy | null      | Element | Throw     |                                                |\n| findBy  | Throw     | Element | Throw     | Looks for an element over the span of 1 second |\n\n\n### Looking for Multiple Elements?\n\n| Name       | 0 matches | 1 match   | > 1 match | Notes                                        |\n|------------|-----------|-----------|-----------|----------------------------------------------|\n| getAllBy   | Throw     | []Element | []Element |                                              |\n| queryAllBy | [ ]       | []Element | []Element |                                              |\n| findAllBy  | Throw     | []Element | []Element | Looks for elements over the span of 1 second |\n\n\n### When to use each\n\n| Goal of test                           | Use                 |\n|----------------------------------------|---------------------|\n| Prove an element exists                | getBy, getAllBy     |\n| Prove an element does **not** exist        | queryBy, queryAllBy |\n| Make sure an element eventually exists | findBy, findAllBy   |","type":"text","id":"aar6f"},{"content":"import { render, screen } from '@testing-library/react';\n\nfunction ColorList() {\n  return (\n    <ul>\n      <li>Red</li>\n      <li>Green</li>\n      <li>Blue</li>\n    </ul>\n  );\n}\n\nrender(<ColorList />);","type":"code","id":"81twn"},{"content":"\r\ntest('testing getBy,findBy and queryBy', async()=>{\r\n  render(<ColorList/>);\r\n  expect(() =>screen.getByRole('textbox')).toThrow();\r\n  expect(screen.queryByRole('textbox')).toEqual(null);\r\n  let errorThrown = false;\r\n  try{\r\n    await screen.findByRole('textbox');\r\n  }\r\n  catch(err){\r\n     errorThrown = true;\r\n  }\r\n  expect(errorThrown).toEqual(true); \r\n})","type":"code","id":"wmnlq"},{"content":"test('getBy, queryBy, findBy if they find 1 element', async () =>{\r\n  render(<ColorList/>);\r\n  expect(\r\n    screen.getByRole('list')\r\n  ).toBeInTheDocument();\r\n\r\n  expect(screen.queryByRole('list')).toBeInTheDocument();\r\n  expect(await screen.findByRole('list')).toBeInTheDocument();\r\n\r\n})","type":"code","id":"42awt"},{"content":"test('getBy, queryBy, findBy if they find 1 element', async () =>{\r\n  render(<ColorList/>);\r\n  expect(\r\n    () => screen.getByRole('listitem')\r\n  ).toThrow();\r\n\r\n  expect(() => screen.queryByRole('listitem')).toThrow();\r\n  let errorThrown = false;\r\n  try{\r\n    await screen.findByRole('listitem');\r\n  }\r\n  catch(err){\r\n     errorThrown = true;\r\n  }\r\n  expect(errorThrown).toEqual(true); \r\n\r\n})","type":"code","id":"5go9u"},{"content":"test('getAllBy, queryAllBy, findAllBy if they find 1 element', async () =>{\r\n  render(<ColorList/>);\r\n\r\n  expect(screen.getAllByRole('listitem')).toHaveLength(3);\r\n  expect(screen.queryAllByRole('listitem')).toHaveLength(3);\r\n\r\n  \r\n  expect(await screen.findAllByRole('listitem')).toHaveLength(3); \r\n})","type":"code","id":"o6bhh"}]